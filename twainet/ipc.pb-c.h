/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: ipc.proto */

#ifndef PROTOBUF_C_ipc_2eproto__INCLUDED
#define PROTOBUF_C_ipc_2eproto__INCLUDED

#include "protobuf-c.h"

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1000000
# error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1000002 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
#endif


typedef struct _Ipc__IPCName Ipc__IPCName;
typedef struct _Ipc__AddIPCObject Ipc__AddIPCObject;
typedef struct _Ipc__UpdateIPCObject Ipc__UpdateIPCObject;
typedef struct _Ipc__ChangeIPCName Ipc__ChangeIPCName;
typedef struct _Ipc__IPCObjectList Ipc__IPCObjectList;
typedef struct _Ipc__ModuleName Ipc__ModuleName;
typedef struct _Ipc__ModuleState Ipc__ModuleState;
typedef struct _Ipc__RemoveIPCObject Ipc__RemoveIPCObject;
typedef struct _Ipc__IPCMessage Ipc__IPCMessage;
typedef struct _Ipc__Ping Ipc__Ping;


/* --- enums --- */


/* --- messages --- */

struct  _Ipc__IPCName
{
  ProtobufCMessage base;
  char *module_name;
  char *host_name;
  char *conn_id;
};
#define IPC__IPCNAME__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ipc__ipcname__descriptor) \
    , NULL, NULL, NULL }


struct  _Ipc__AddIPCObject
{
  ProtobufCMessage base;
  Ipc__IPCName *ipc_name;
  char *ip;
  int32_t port;
  char *access_id;
};
#define IPC__ADD_IPCOBJECT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ipc__add_ipcobject__descriptor) \
    , NULL, NULL, 0, NULL }


struct  _Ipc__UpdateIPCObject
{
  ProtobufCMessage base;
  Ipc__IPCName *ipc_old_name;
  Ipc__IPCName *ipc_new_name;
};
#define IPC__UPDATE_IPCOBJECT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ipc__update_ipcobject__descriptor) \
    , NULL, NULL }


struct  _Ipc__ChangeIPCName
{
  ProtobufCMessage base;
  Ipc__IPCName *ipc_name;
};
#define IPC__CHANGE_IPCNAME__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ipc__change_ipcname__descriptor) \
    , NULL }


struct  _Ipc__IPCObjectList
{
  ProtobufCMessage base;
  size_t n_ipc_object;
  Ipc__AddIPCObject **ipc_object;
  char *access_id;
};
#define IPC__IPCOBJECT_LIST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ipc__ipcobject_list__descriptor) \
    , 0,NULL, NULL }


struct  _Ipc__ModuleName
{
  ProtobufCMessage base;
  Ipc__IPCName *ipc_name;
  char *ip;
  int32_t port;
  char *access_id;
  protobuf_c_boolean has_is_exist;
  protobuf_c_boolean is_exist;
  char *conn_id;
};
#define IPC__MODULE_NAME__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ipc__module_name__descriptor) \
    , NULL, NULL, 0, NULL, 0,0, NULL }


struct  _Ipc__ModuleState
{
  ProtobufCMessage base;
  protobuf_c_boolean exist;
  char *rndval;
  char *id;
};
#define IPC__MODULE_STATE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ipc__module_state__descriptor) \
    , 0, NULL, NULL }


struct  _Ipc__RemoveIPCObject
{
  ProtobufCMessage base;
  char *ipc_name;
};
#define IPC__REMOVE_IPCOBJECT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ipc__remove_ipcobject__descriptor) \
    , NULL }


struct  _Ipc__IPCMessage
{
  ProtobufCMessage base;
  char *message_name;
  size_t n_ipc_path;
  Ipc__IPCName **ipc_path;
  size_t n_ipc_sender;
  Ipc__IPCName **ipc_sender;
  protobuf_c_boolean has_message;
  ProtobufCBinaryData message;
};
#define IPC__IPCMESSAGE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ipc__ipcmessage__descriptor) \
    , NULL, 0,NULL, 0,NULL, 0,{0,NULL} }


struct  _Ipc__Ping
{
  ProtobufCMessage base;
};
#define IPC__PING__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ipc__ping__descriptor) \
     }


/* Ipc__IPCName methods */
void   ipc__ipcname__init
                     (Ipc__IPCName         *message);
size_t ipc__ipcname__get_packed_size
                     (const Ipc__IPCName   *message);
size_t ipc__ipcname__pack
                     (const Ipc__IPCName   *message,
                      uint8_t             *out);
size_t ipc__ipcname__pack_to_buffer
                     (const Ipc__IPCName   *message,
                      ProtobufCBuffer     *buffer);
Ipc__IPCName *
       ipc__ipcname__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ipc__ipcname__free_unpacked
                     (Ipc__IPCName *message,
                      ProtobufCAllocator *allocator);
/* Ipc__AddIPCObject methods */
void   ipc__add_ipcobject__init
                     (Ipc__AddIPCObject         *message);
size_t ipc__add_ipcobject__get_packed_size
                     (const Ipc__AddIPCObject   *message);
size_t ipc__add_ipcobject__pack
                     (const Ipc__AddIPCObject   *message,
                      uint8_t             *out);
size_t ipc__add_ipcobject__pack_to_buffer
                     (const Ipc__AddIPCObject   *message,
                      ProtobufCBuffer     *buffer);
Ipc__AddIPCObject *
       ipc__add_ipcobject__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ipc__add_ipcobject__free_unpacked
                     (Ipc__AddIPCObject *message,
                      ProtobufCAllocator *allocator);
/* Ipc__UpdateIPCObject methods */
void   ipc__update_ipcobject__init
                     (Ipc__UpdateIPCObject         *message);
size_t ipc__update_ipcobject__get_packed_size
                     (const Ipc__UpdateIPCObject   *message);
size_t ipc__update_ipcobject__pack
                     (const Ipc__UpdateIPCObject   *message,
                      uint8_t             *out);
size_t ipc__update_ipcobject__pack_to_buffer
                     (const Ipc__UpdateIPCObject   *message,
                      ProtobufCBuffer     *buffer);
Ipc__UpdateIPCObject *
       ipc__update_ipcobject__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ipc__update_ipcobject__free_unpacked
                     (Ipc__UpdateIPCObject *message,
                      ProtobufCAllocator *allocator);
/* Ipc__ChangeIPCName methods */
void   ipc__change_ipcname__init
                     (Ipc__ChangeIPCName         *message);
size_t ipc__change_ipcname__get_packed_size
                     (const Ipc__ChangeIPCName   *message);
size_t ipc__change_ipcname__pack
                     (const Ipc__ChangeIPCName   *message,
                      uint8_t             *out);
size_t ipc__change_ipcname__pack_to_buffer
                     (const Ipc__ChangeIPCName   *message,
                      ProtobufCBuffer     *buffer);
Ipc__ChangeIPCName *
       ipc__change_ipcname__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ipc__change_ipcname__free_unpacked
                     (Ipc__ChangeIPCName *message,
                      ProtobufCAllocator *allocator);
/* Ipc__IPCObjectList methods */
void   ipc__ipcobject_list__init
                     (Ipc__IPCObjectList         *message);
size_t ipc__ipcobject_list__get_packed_size
                     (const Ipc__IPCObjectList   *message);
size_t ipc__ipcobject_list__pack
                     (const Ipc__IPCObjectList   *message,
                      uint8_t             *out);
size_t ipc__ipcobject_list__pack_to_buffer
                     (const Ipc__IPCObjectList   *message,
                      ProtobufCBuffer     *buffer);
Ipc__IPCObjectList *
       ipc__ipcobject_list__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ipc__ipcobject_list__free_unpacked
                     (Ipc__IPCObjectList *message,
                      ProtobufCAllocator *allocator);
/* Ipc__ModuleName methods */
void   ipc__module_name__init
                     (Ipc__ModuleName         *message);
size_t ipc__module_name__get_packed_size
                     (const Ipc__ModuleName   *message);
size_t ipc__module_name__pack
                     (const Ipc__ModuleName   *message,
                      uint8_t             *out);
size_t ipc__module_name__pack_to_buffer
                     (const Ipc__ModuleName   *message,
                      ProtobufCBuffer     *buffer);
Ipc__ModuleName *
       ipc__module_name__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ipc__module_name__free_unpacked
                     (Ipc__ModuleName *message,
                      ProtobufCAllocator *allocator);
/* Ipc__ModuleState methods */
void   ipc__module_state__init
                     (Ipc__ModuleState         *message);
size_t ipc__module_state__get_packed_size
                     (const Ipc__ModuleState   *message);
size_t ipc__module_state__pack
                     (const Ipc__ModuleState   *message,
                      uint8_t             *out);
size_t ipc__module_state__pack_to_buffer
                     (const Ipc__ModuleState   *message,
                      ProtobufCBuffer     *buffer);
Ipc__ModuleState *
       ipc__module_state__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ipc__module_state__free_unpacked
                     (Ipc__ModuleState *message,
                      ProtobufCAllocator *allocator);
/* Ipc__RemoveIPCObject methods */
void   ipc__remove_ipcobject__init
                     (Ipc__RemoveIPCObject         *message);
size_t ipc__remove_ipcobject__get_packed_size
                     (const Ipc__RemoveIPCObject   *message);
size_t ipc__remove_ipcobject__pack
                     (const Ipc__RemoveIPCObject   *message,
                      uint8_t             *out);
size_t ipc__remove_ipcobject__pack_to_buffer
                     (const Ipc__RemoveIPCObject   *message,
                      ProtobufCBuffer     *buffer);
Ipc__RemoveIPCObject *
       ipc__remove_ipcobject__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ipc__remove_ipcobject__free_unpacked
                     (Ipc__RemoveIPCObject *message,
                      ProtobufCAllocator *allocator);
/* Ipc__IPCMessage methods */
void   ipc__ipcmessage__init
                     (Ipc__IPCMessage         *message);
size_t ipc__ipcmessage__get_packed_size
                     (const Ipc__IPCMessage   *message);
size_t ipc__ipcmessage__pack
                     (const Ipc__IPCMessage   *message,
                      uint8_t             *out);
size_t ipc__ipcmessage__pack_to_buffer
                     (const Ipc__IPCMessage   *message,
                      ProtobufCBuffer     *buffer);
Ipc__IPCMessage *
       ipc__ipcmessage__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ipc__ipcmessage__free_unpacked
                     (Ipc__IPCMessage *message,
                      ProtobufCAllocator *allocator);
/* Ipc__Ping methods */
void   ipc__ping__init
                     (Ipc__Ping         *message);
size_t ipc__ping__get_packed_size
                     (const Ipc__Ping   *message);
size_t ipc__ping__pack
                     (const Ipc__Ping   *message,
                      uint8_t             *out);
size_t ipc__ping__pack_to_buffer
                     (const Ipc__Ping   *message,
                      ProtobufCBuffer     *buffer);
Ipc__Ping *
       ipc__ping__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ipc__ping__free_unpacked
                     (Ipc__Ping *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*Ipc__IPCName_Closure)
                 (const Ipc__IPCName *message,
                  void *closure_data);
typedef void (*Ipc__AddIPCObject_Closure)
                 (const Ipc__AddIPCObject *message,
                  void *closure_data);
typedef void (*Ipc__UpdateIPCObject_Closure)
                 (const Ipc__UpdateIPCObject *message,
                  void *closure_data);
typedef void (*Ipc__ChangeIPCName_Closure)
                 (const Ipc__ChangeIPCName *message,
                  void *closure_data);
typedef void (*Ipc__IPCObjectList_Closure)
                 (const Ipc__IPCObjectList *message,
                  void *closure_data);
typedef void (*Ipc__ModuleName_Closure)
                 (const Ipc__ModuleName *message,
                  void *closure_data);
typedef void (*Ipc__ModuleState_Closure)
                 (const Ipc__ModuleState *message,
                  void *closure_data);
typedef void (*Ipc__RemoveIPCObject_Closure)
                 (const Ipc__RemoveIPCObject *message,
                  void *closure_data);
typedef void (*Ipc__IPCMessage_Closure)
                 (const Ipc__IPCMessage *message,
                  void *closure_data);
typedef void (*Ipc__Ping_Closure)
                 (const Ipc__Ping *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCMessageDescriptor ipc__ipcname__descriptor;
extern const ProtobufCMessageDescriptor ipc__add_ipcobject__descriptor;
extern const ProtobufCMessageDescriptor ipc__update_ipcobject__descriptor;
extern const ProtobufCMessageDescriptor ipc__change_ipcname__descriptor;
extern const ProtobufCMessageDescriptor ipc__ipcobject_list__descriptor;
extern const ProtobufCMessageDescriptor ipc__module_name__descriptor;
extern const ProtobufCMessageDescriptor ipc__module_state__descriptor;
extern const ProtobufCMessageDescriptor ipc__remove_ipcobject__descriptor;
extern const ProtobufCMessageDescriptor ipc__ipcmessage__descriptor;
extern const ProtobufCMessageDescriptor ipc__ping__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_ipc_2eproto__INCLUDED */
